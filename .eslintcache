[{"C:\\Users\\User\\Desktop\\new\\job-board\\src\\index.tsx":"1","C:\\Users\\User\\Desktop\\new\\job-board\\src\\locales\\pt\\messages.js":"2","C:\\Users\\User\\Desktop\\new\\job-board\\src\\locales\\fr\\messages.js":"3","C:\\Users\\User\\Desktop\\new\\job-board\\src\\locales\\en\\messages.js":"4","C:\\Users\\User\\Desktop\\new\\job-board\\src\\reportWebVitals.ts":"5","C:\\Users\\User\\Desktop\\new\\job-board\\src\\sentry.ts":"6","C:\\Users\\User\\Desktop\\new\\job-board\\src\\App.tsx":"7","C:\\Users\\User\\Desktop\\new\\job-board\\src\\ThemedApp.tsx":"8","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\Compose.tsx":"9","C:\\Users\\User\\Desktop\\new\\job-board\\src\\providers\\FilterProvider.tsx":"10","C:\\Users\\User\\Desktop\\new\\job-board\\src\\providers\\SettingsProvider.tsx":"11","C:\\Users\\User\\Desktop\\new\\job-board\\src\\Routes.tsx":"12","C:\\Users\\User\\Desktop\\new\\job-board\\src\\lib\\storage.tsx":"13","C:\\Users\\User\\Desktop\\new\\job-board\\src\\themes\\default\\index.ts":"14","C:\\Users\\User\\Desktop\\new\\job-board\\src\\themes\\default\\typography.ts":"15","C:\\Users\\User\\Desktop\\new\\job-board\\src\\themes\\default\\palette.ts":"16","C:\\Users\\User\\Desktop\\new\\job-board\\src\\themes\\default\\breakpoints.ts":"17","C:\\Users\\User\\Desktop\\new\\job-board\\src\\themes\\default\\shadows.ts":"18","C:\\Users\\User\\Desktop\\new\\job-board\\src\\template\\DefaultTemplate\\index.tsx":"19","C:\\Users\\User\\Desktop\\new\\job-board\\src\\pages\\Jobs\\index.tsx":"20","C:\\Users\\User\\Desktop\\new\\job-board\\src\\pages\\JobView\\index.tsx":"21","C:\\Users\\User\\Desktop\\new\\job-board\\src\\pages\\AboutUs\\index.tsx":"22","C:\\Users\\User\\Desktop\\new\\job-board\\src\\pages\\Home\\index.tsx":"23","C:\\Users\\User\\Desktop\\new\\job-board\\src\\constants\\spacing.ts":"24","C:\\Users\\User\\Desktop\\new\\job-board\\src\\constants\\index.ts":"25","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\shared\\Select.tsx":"26","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\shared\\Typography.tsx":"27","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\AppBar\\index.tsx":"28","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\JobCard\\index.tsx":"29","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\SearchBar\\index.tsx":"30","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\FilterDrawer\\index.tsx":"31","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\PlanetFilterBar\\index.tsx":"32","C:\\Users\\User\\Desktop\\new\\job-board\\src\\utils\\index.tsx":"33","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\shared\\Checkbox.tsx":"34","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\shared\\Input.tsx":"35","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\PlanetWithTitle\\index.tsx":"36","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\LanguageSelect\\index.tsx":"37","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\NavLink\\index.tsx":"38","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\LogoWithTitle\\index.tsx":"39"},{"size":986,"mtime":1613909994044,"results":"40","hashOfConfig":"41"},{"size":1585,"mtime":1613909994046,"results":"42","hashOfConfig":"41"},{"size":1387,"mtime":1613909994046,"results":"43","hashOfConfig":"41"},{"size":1488,"mtime":1613909994045,"results":"44","hashOfConfig":"41"},{"size":440,"mtime":1613909994049,"results":"45","hashOfConfig":"41"},{"size":448,"mtime":1613909994050,"results":"46","hashOfConfig":"41"},{"size":525,"mtime":1613909994031,"results":"47","hashOfConfig":"41"},{"size":1980,"mtime":1613909994032,"results":"48","hashOfConfig":"41"},{"size":892,"mtime":1613909994036,"results":"49","hashOfConfig":"41"},{"size":2345,"mtime":1613909994049,"results":"50","hashOfConfig":"41"},{"size":2352,"mtime":1613909994049,"results":"51","hashOfConfig":"41"},{"size":935,"mtime":1613909994032,"results":"52","hashOfConfig":"41"},{"size":420,"mtime":1613909994044,"results":"53","hashOfConfig":"41"},{"size":1909,"mtime":1613909994051,"results":"54","hashOfConfig":"41"},{"size":1866,"mtime":1613909994052,"results":"55","hashOfConfig":"41"},{"size":644,"mtime":1613909994052,"results":"56","hashOfConfig":"41"},{"size":154,"mtime":1613909994051,"results":"57","hashOfConfig":"41"},{"size":1041,"mtime":1613909994052,"results":"58","hashOfConfig":"41"},{"size":1965,"mtime":1613909994051,"results":"59","hashOfConfig":"41"},{"size":7372,"mtime":1613909994048,"results":"60","hashOfConfig":"41"},{"size":5810,"mtime":1613909994048,"results":"61","hashOfConfig":"41"},{"size":1853,"mtime":1613909994047,"results":"62","hashOfConfig":"41"},{"size":3087,"mtime":1613909994047,"results":"63","hashOfConfig":"41"},{"size":245,"mtime":1613909994044,"results":"64","hashOfConfig":"41"},{"size":7988,"mtime":1613909994043,"results":"65","hashOfConfig":"41"},{"size":5431,"mtime":1613909994042,"results":"66","hashOfConfig":"41"},{"size":1743,"mtime":1613909994043,"results":"67","hashOfConfig":"41"},{"size":2502,"mtime":1613909994036,"results":"68","hashOfConfig":"41"},{"size":3048,"mtime":1613909994038,"results":"69","hashOfConfig":"41"},{"size":801,"mtime":1613909994041,"results":"70","hashOfConfig":"41"},{"size":5264,"mtime":1613909994037,"results":"71","hashOfConfig":"41"},{"size":2562,"mtime":1613909994040,"results":"72","hashOfConfig":"41"},{"size":731,"mtime":1613909994053,"results":"73","hashOfConfig":"41"},{"size":1959,"mtime":1613909994042,"results":"74","hashOfConfig":"41"},{"size":2603,"mtime":1613909994042,"results":"75","hashOfConfig":"41"},{"size":1776,"mtime":1613909994040,"results":"76","hashOfConfig":"41"},{"size":2540,"mtime":1613909994038,"results":"77","hashOfConfig":"41"},{"size":925,"mtime":1613909994039,"results":"78","hashOfConfig":"41"},{"size":1326,"mtime":1613909994039,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x6h7is",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},"C:\\Users\\User\\Desktop\\new\\job-board\\src\\index.tsx",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\locales\\pt\\messages.js",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\locales\\fr\\messages.js",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\locales\\en\\messages.js",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\reportWebVitals.ts",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\sentry.ts",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\App.tsx",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\ThemedApp.tsx",["176","177","178","179","180"],"import { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { Fragment, useEffect } from \"react\";\r\n\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\n// components\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Routes from \"./Routes\";\r\n\r\n// react-router-dom\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\n// providers\r\nimport { useSettingsState } from \"providers/SettingsProvider\";\r\n\r\n// lib\r\nimport { getSettingsInStorage } from \"lib/storage\";\r\n\r\n// themes\r\nimport theme from \"themes/default\";\r\n\r\nimport { i18n } from \"@lingui/core\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({}));\r\n\r\nexport type ThemedAppProps = {};\r\n\r\n/**\r\n * @component ThemedApp\r\n */\r\nfunction ThemedApp({}: ThemedAppProps) {\r\n  const classes = useStyles();\r\n\r\n  const [settings, setSettings] = useSettingsState();\r\n\r\n  useEffect(() => {\r\n    const localSettings = getSettingsInStorage();\r\n\r\n    // check if localSettings exists and also we need to check for diffrence with global setting state value\r\n    if (localSettings) {\r\n      // if we found any settings we apply settings\r\n      setSettings({ ...settings, ...localSettings });\r\n      i18n.activate(localSettings.lang);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme(settings.type)}>\r\n      <CssBaseline />\r\n      <Router>\r\n        <Routes />\r\n      </Router>\r\n      {/* <button\r\n            onClick={() => {\r\n              i18n.activate(\"en\");\r\n            }}\r\n          >\r\n            en\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              i18n.activate(\"fr\");\r\n            }}\r\n          >\r\n            french\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              i18n.activate(\"pt\");\r\n            }}\r\n          >\r\n            Portuguese\r\n          </button> */}\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default ThemedApp;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\Compose.tsx",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\providers\\FilterProvider.tsx",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\providers\\SettingsProvider.tsx",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\Routes.tsx",["181"],"import { useHistory } from \"react-router-dom\";\r\n\r\n// templates\r\nimport DefaultTemplate from \"template/DefaultTemplate\";\r\n\r\n// react-router-dom\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\n// pages\r\nimport HomePage from \"pages/Home\";\r\nimport JobsPage from \"pages/Jobs\";\r\nimport AboutUsPage from \"pages/AboutUs\";\r\nimport JobViewPage from \"pages/JobView\";\r\n\r\nexport type RoutesProps = {};\r\n\r\n/**\r\n * @component Routes\r\n */\r\nfunction Routes({}: RoutesProps) {\r\n  const history = useHistory();\r\n  history.listen(() => {\r\n    window.scrollTo(0, 0);\r\n  });\r\n\r\n  return (\r\n    <DefaultTemplate>\r\n      <Switch>\r\n        <Route component={HomePage} exact path=\"/\" />\r\n        <Route component={JobsPage} exact path=\"/jobs\" />\r\n        <Route component={JobViewPage} exact path=\"/jobs/:id\" />\r\n        <Route component={AboutUsPage} exact path=\"/about-us\" />\r\n      </Switch>\r\n    </DefaultTemplate>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\lib\\storage.tsx",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\themes\\default\\index.ts",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\themes\\default\\typography.ts",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\themes\\default\\palette.ts",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\themes\\default\\breakpoints.ts",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\themes\\default\\shadows.ts",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\template\\DefaultTemplate\\index.tsx",["182","183","184","185","186","187","188","189","190"],"import { ReactElement, ReactNode } from \"react\";\r\n\r\nimport { useTheme, makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nimport { useScrollTrigger } from \"@material-ui/core\";\r\n\r\n// components\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport AppBar from \"components/AppBar\";\r\nimport FilterBar from \"components/FilterBar\";\r\nimport Footer from \"components/Footer\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\n// constants\r\nimport { SPACING, SPACING_DOUBLE, SPACING_HALF } from \"constants/spacing\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    overflow: \"hidden\",\r\n  },\r\n  containerWrapper: {\r\n    flex: 1,\r\n    overflowY: \"auto\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    paddingTop: theme.spacing(SPACING_HALF),\r\n    paddingBottom: theme.spacing(SPACING_HALF),\r\n  },\r\n}));\r\n\r\nexport type DefaultTemplateProps = {\r\n  children: ReactElement;\r\n};\r\n\r\nlet container;\r\n\r\n/**\r\n * @component DefaultTemplate\r\n * @summary DefaultTemplate default template with just footer and appbar {THIS TEMPLATE IS PROTECTED}\r\n * @param {boolean} loggedIn\r\n */\r\nfunction DefaultTemplate({ children }: DefaultTemplateProps) {\r\n  const classes = useStyles();\r\n\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n      position=\"relative\"\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n      className={classes.root}\r\n    >\r\n      {/* <NavigationDrawer /> */}\r\n\r\n      <Box position=\"relative\" top={0} left={0} zIndex={theme.zIndex.appBar}>\r\n        <AppBar />\r\n      </Box>\r\n      <div\r\n        ref={(ref) => (container = ref)}\r\n        className={classes.containerWrapper}\r\n      >\r\n        <Container className={classes.container}>{children}</Container>\r\n      </div>\r\n      {/* <Footer /> */}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default DefaultTemplate;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\pages\\Jobs\\index.tsx",["191","192"],"import { useState } from \"react\";\r\n\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nimport {\r\n  SPACING,\r\n  SPACING_DOUBLE,\r\n  SPACING_HALF,\r\n  SPACING_LEAST,\r\n} from \"constants/spacing\";\r\n\r\nimport _ from \"lodash\";\r\n\r\n// components\r\nimport JobCard from \"components/JobCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"components/shared/Typography\";\r\nimport SearchBar from \"components/SearchBar\";\r\nimport PlanetFilterBar from \"components/PlanetFilterBar\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport FilterDrawer from \"components/FilterDrawer\";\r\nimport Select, { Option } from \"components/shared/Select\";\r\n\r\n// constants\r\nimport { Jobs as JobList } from \"constants/index\";\r\n\r\n// providers\r\nimport { useFilterState } from \"providers/FilterProvider\";\r\n\r\n// icons\r\nimport FilterIcon from \"@material-ui/icons/FilterListOutlined\";\r\n// translate\r\nimport { t } from \"@lingui/macro\";\r\nimport { Trans } from \"@lingui/macro\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    // alignItems: \"center\",\r\n  },\r\n  titleWrapper: {\r\n    height: 300,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n  },\r\n  searchBar: {\r\n    width: 600,\r\n    marginTop: theme.spacing(SPACING),\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      width: 400,\r\n    },\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      width: \"auto\",\r\n    },\r\n  },\r\n  title: {\r\n    fontWeight: 600,\r\n    marginBottom: theme.spacing(SPACING_HALF),\r\n  },\r\n  grid: {\r\n    marginBottom: theme.spacing(SPACING_DOUBLE),\r\n  },\r\n  cardsParent: {\r\n    display: \"grid\",\r\n    marginBottom: \"12px\",\r\n  },\r\n  filterActionBar: {\r\n    display: \"flex\",\r\n    width: \"100%\",\r\n    margin: theme.spacing(SPACING, 0, SPACING_DOUBLE, 0),\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      flexDirection: \"column\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n    },\r\n  },\r\n  filterButton: {\r\n    \"&:first-child\": {\r\n      marginRight: theme.spacing(SPACING_LEAST),\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        margin: 0,\r\n      },\r\n    },\r\n    \"&:last-child\": {\r\n      marginLeft: theme.spacing(SPACING_LEAST),\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        marginTop: theme.spacing(SPACING_LEAST),\r\n        marginLeft: 0,\r\n        width: \"100%\",\r\n      },\r\n    },\r\n  },\r\n  filterSelectWrapper: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      marginTop: theme.spacing(SPACING_HALF),\r\n    },\r\n  },\r\n  filterButtonWrapper: {\r\n    flex: 1,\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport type JobsProps = {};\r\n\r\n/**\r\n * @component Jobs\r\n */\r\nfunction Jobs({}: JobsProps) {\r\n  const classes = useStyles();\r\n\r\n  const [openDrawer, setOpenDrawer] = useState<boolean>(false);\r\n\r\n  const [filter, setFilter] = useFilterState();\r\n\r\n  const getFilteredJobs = () => {\r\n    // filter logic here\r\n    const searchTerm: string = filter.search;\r\n    let result = [...JobList];\r\n\r\n    console.log(result);\r\n\r\n    // filter search\r\n    result = result.filter(\r\n      (job) =>\r\n        !job.title?.toLowerCase().search(searchTerm) ||\r\n        !job.company.name?.toLowerCase().search(searchTerm)\r\n    );\r\n\r\n    // filter location\r\n    const locations = filter.locations;\r\n    if (locations.length > 0) {\r\n      result = result.filter(\r\n        (job) =>\r\n          locations.findIndex(\r\n            (location) => location.name === job.location.name\r\n          ) > -1\r\n      );\r\n    }\r\n\r\n    // filter job types\r\n    const jobTypes = filter.jobTypes;\r\n    if (jobTypes.length > 0) {\r\n      result = result.filter(\r\n        (job) => jobTypes.findIndex((jobType) => jobType === job.jobType) > -1\r\n      );\r\n    }\r\n\r\n    // filter job fields\r\n    const jobFields = filter.jobFields;\r\n    if (jobFields.length > 0) {\r\n      result = result.filter(\r\n        (job) =>\r\n          jobFields.findIndex((jobField) => jobField === job.jobField) > -1\r\n      );\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  const onFilterButtonClick = () => {\r\n    setOpenDrawer(true);\r\n  };\r\n\r\n  const handleSearchInput = (value: string) => {\r\n    setFilter({ ...filter, search: value });\r\n  };\r\n\r\n  const handleClearFilter = () => {\r\n    setFilter({\r\n      search: \"\",\r\n      locations: [],\r\n      order: t`newest`,\r\n      jobFields: [],\r\n      jobTypes: [],\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FilterDrawer open={openDrawer} onClose={() => setOpenDrawer(false)} />\r\n\r\n      <div className={classes.titleWrapper}>\r\n        <Typography\r\n          variant=\"h2\"\r\n          letterSpacing={SPACING_DOUBLE}\r\n          fontWeight={500}\r\n        >\r\n          <Trans>Job List</Trans>\r\n        </Typography>\r\n        <SearchBar\r\n          value={filter.search}\r\n          placeholder={t`search for job title`}\r\n          className={classes.searchBar}\r\n          onChange={handleSearchInput}\r\n        />\r\n      </div>\r\n\r\n      <Hidden mdDown>\r\n        <PlanetFilterBar />\r\n      </Hidden>\r\n\r\n      <div className={classes.filterActionBar}>\r\n        <div className={classes.filterButtonWrapper}>\r\n          <Button\r\n            onClick={onFilterButtonClick}\r\n            className={classes.filterButton}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<FilterIcon />}\r\n          >\r\n            <Trans>Advanced Filter</Trans>\r\n          </Button>\r\n          <Button\r\n            className={classes.filterButton}\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={handleClearFilter}\r\n          >\r\n            <Trans>Clear Filter</Trans>\r\n          </Button>\r\n        </div>\r\n\r\n        <div className={classes.filterSelectWrapper}>\r\n          <Hidden lgUp>\r\n            <PlanetFilterBar shrink />\r\n          </Hidden>\r\n\r\n          <Select\r\n            onChange={(value: Option) => {\r\n              setFilter({\r\n                ...filter,\r\n                order: value.label.toLowerCase().replace(\" \", \"\"),\r\n              });\r\n            }}\r\n            selected={filter.order}\r\n            label={t`SORT BY`}\r\n            options={[\r\n              { _id: t`newest`, label: t`NEWEST` },\r\n              { _id: t`oldest`, label: t`OLDEST` },\r\n              { _id: t`mostpaid`, label: t`MOST PAID` },\r\n            ]}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h4\"\r\n          gutterBottom\r\n          color=\"textSecondary\"\r\n        >\r\n          <Trans>TODAY</Trans>\r\n        </Typography>\r\n        <div className={classes.cardsParent}>\r\n          <Grid container spacing={SPACING_HALF}>\r\n            {getFilteredJobs().map((job, index) => (\r\n              <Fade\r\n                in={true}\r\n                timeout={{ enter: 2 * 100 * (index + 1) }}\r\n                key={job._id}\r\n              >\r\n                <Grid item xs={12} md={6}>\r\n                  <JobCard {...job} />\r\n                </Grid>\r\n              </Fade>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jobs;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\pages\\JobView\\index.tsx",["193"],"import { useEffect, useState } from \"react\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\n// components\r\nimport Typography from \"components/shared/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\n// icons\r\nimport RocketIcon from \"@material-ui/icons/Send\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport CalendarIcon from \"@material-ui/icons/CalendarToday\";\r\n\r\n// constants\r\nimport {\r\n  SPACING,\r\n  SPACING_DOUBLE,\r\n  SPACING_HALF,\r\n  SPACING_LEAST,\r\n} from \"constants/spacing\";\r\nimport { Job, Jobs } from \"constants/index\";\r\nimport { getDisplayDate } from \"utils\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  brandImage: {\r\n    width: 124,\r\n    height: 124,\r\n    borderRadius: \"50%\",\r\n    objectFit: \"cover\",\r\n    objectPosition: \"center\",\r\n    marginBottom: theme.spacing(SPACING_HALF),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(SPACING),\r\n    marginBottom: theme.spacing(SPACING),\r\n\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      padding: theme.spacing(SPACING_DOUBLE),\r\n    },\r\n  },\r\n  title: {\r\n    marginBottom: theme.spacing(SPACING_HALF),\r\n  },\r\n  header: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(SPACING_DOUBLE, 0),\r\n  },\r\n  calendarWrapper: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    color: theme.palette.text.secondary,\r\n    marginTop: theme.spacing(SPACING),\r\n  },\r\n  icon: {\r\n    marginRight: theme.spacing(SPACING_LEAST),\r\n  },\r\n  divider: {\r\n    margin: theme.spacing(SPACING, 0),\r\n  },\r\n  skillChip: {\r\n    margin: theme.spacing(SPACING_LEAST),\r\n    \"&:first-child\": {\r\n      marginLeft: 0,\r\n    },\r\n    \"&:last-child\": {\r\n      marginRight: 0,\r\n    },\r\n  },\r\n}));\r\n\r\nexport type JobViewProps = {\r\n  match: any;\r\n};\r\n\r\n/**\r\n * @component JobView\r\n */\r\nfunction JobView({ match }: JobViewProps) {\r\n  const classes = useStyles();\r\n\r\n  const [job, setJob] = useState<Job | undefined>(undefined);\r\n\r\n  const id = match.params.id;\r\n\r\n  useEffect(() => {\r\n    const targetJob = Jobs.find((_) => _._id === id);\r\n    setJob(targetJob);\r\n  }, []);\r\n\r\n  if (job && !!id) {\r\n    return (\r\n      <div>\r\n        <div className={classes.header}>\r\n          <img\r\n            className={classes.brandImage}\r\n            src={job.company.image}\r\n            alt={`${job.company.name} logo`}\r\n          />\r\n\r\n          <Typography gutterBottom fontWeight=\"bold\">\r\n            {job.jobField.toUpperCase()}\r\n          </Typography>\r\n          <Typography gutterBottom variant=\"h1\" fontWeight={600}>\r\n            {job.company.name.toUpperCase()}\r\n          </Typography>\r\n          <Typography gutterBottom color=\"primary\" fontWeight=\"bold\">\r\n            {job.jobType.toUpperCase()}\r\n          </Typography>\r\n\r\n          <div className={classes.calendarWrapper}>\r\n            <CalendarIcon\r\n              fontSize=\"small\"\r\n              className={classes.icon}\r\n              color=\"inherit\"\r\n            />\r\n            <Typography\r\n              letterSpacing={SPACING_HALF}\r\n              fontWeight={600}\r\n              color=\"inherit\"\r\n            >\r\n              {getDisplayDate(\r\n                job.date.getFullYear(),\r\n                job.date.getMonth(),\r\n                job.date.getDate()\r\n              )}\r\n            </Typography>\r\n          </div>\r\n        </div>\r\n\r\n        <Paper elevation={2} className={classes.paper}>\r\n          <Typography\r\n            variant=\"h4\"\r\n            letterSpacing={SPACING_DOUBLE * 2}\r\n            fontWeight={500}\r\n            className={classes.title}\r\n          >\r\n            NESSARAY SKILLS\r\n          </Typography>\r\n\r\n          <div>\r\n            {job.necessarySkills.map((skill, index) => (\r\n              <Chip\r\n                key={index}\r\n                className={classes.skillChip}\r\n                color=\"primary\"\r\n                label={skill}\r\n              />\r\n            ))}\r\n          </div>\r\n\r\n          <Divider variant=\"fullWidth\" className={classes.divider} light />\r\n\r\n          <Typography\r\n            variant=\"h4\"\r\n            letterSpacing={SPACING_DOUBLE * 2}\r\n            fontWeight={500}\r\n            className={classes.title}\r\n          >\r\n            WHERE WE ARE?\r\n          </Typography>\r\n          <Typography fontWeight=\"bold\" color={job.location.color}>\r\n            {job.location.name.toUpperCase()}\r\n          </Typography>\r\n        </Paper>\r\n\r\n        <Paper elevation={2} className={classes.paper}>\r\n          <Typography\r\n            variant=\"h4\"\r\n            letterSpacing={SPACING_DOUBLE * 2}\r\n            fontWeight={500}\r\n            className={classes.title}\r\n          >\r\n            JOB DESCRIPTION\r\n          </Typography>\r\n          <Typography>{job.description}</Typography>\r\n          <Divider variant=\"fullWidth\" light className={classes.divider} />\r\n\r\n          <Typography\r\n            variant=\"h4\"\r\n            letterSpacing={SPACING_DOUBLE * 2}\r\n            fontWeight={500}\r\n            className={classes.title}\r\n          >\r\n            CONTACT US\r\n          </Typography>\r\n          <IconButton color=\"primary\">\r\n            <RocketIcon />\r\n          </IconButton>\r\n\r\n          <IconButton color=\"primary\">\r\n            <MailIcon />\r\n          </IconButton>\r\n        </Paper>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n      >\r\n        <Typography variant=\"h1\" letterSpacing={SPACING}>\r\n          NOT FOUND\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JobView;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\pages\\AboutUs\\index.tsx",["194","195","196"],"import { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\n// components\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport InstagramIcon from \"@material-ui/icons/Instagram\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport { t } from \"@lingui/macro\";\r\nimport { Trans } from \"@lingui/macro\";\r\nconst useStyles = makeStyles((theme: Theme) => ({}));\r\n\r\nexport type AboutUsProps = {};\r\n\r\n/**\r\n * @component AboutUs\r\n */\r\nfunction AboutUs({}: AboutUsProps) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Box width=\"600px\">\r\n        <Typography align=\"center\" variant=\"h4\" gutterBottom>\r\n          <Trans>About Us</Trans>\r\n        </Typography>\r\n        <Typography align=\"center\">\r\n          <Trans>\r\n            Lorem Ipsum is simply dummy text of the printing and typesetting\r\n            industry. Lorem Ipsum has been the industry's standard dummy text\r\n            ever since the 1500s, when an unknown printer took a galley of type\r\n            and scrambled it to make a type specimen book. It has survived not\r\n            only five centuries\r\n          </Trans>\r\n        </Typography>\r\n\r\n        <Box display=\"flex\" width=\"100%\" justifyContent=\"center\">\r\n          <IconButton color=\"primary\">\r\n            <GitHubIcon />\r\n          </IconButton>\r\n          <IconButton color=\"primary\">\r\n            <TwitterIcon />\r\n          </IconButton>\r\n          <IconButton color=\"primary\">\r\n            <InstagramIcon />\r\n          </IconButton>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default AboutUs;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\pages\\Home\\index.tsx",["197","198"],"import { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\n// components\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n// templates\r\nimport DefaultTemplate from \"template/DefaultTemplate\";\r\nimport { SPACING } from \"constants/spacing\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Trans } from \"@lingui/macro\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  heroImage: {\r\n    userSelect: \"none\",\r\n    display: \"none\",\r\n    position: \"absolute\",\r\n    userDrag: \"none\",\r\n    bottom: 0,\r\n    right: 0,\r\n    [theme.breakpoints.up(\"lg\")]: {\r\n      width: \"850px\",\r\n      display: \"block\",\r\n    },\r\n  },\r\n  contentWrapper: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    position: \"relative\",\r\n  },\r\n  heroContent: {\r\n    zIndex: theme.zIndex.appBar,\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n\r\n    height: \"auto\",\r\n    transform: \"translateY(-50%)\",\r\n  },\r\n  title: {\r\n    fontWeight: 700,\r\n    fontSize: 45,\r\n    lineHeight: 1.2,\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      fontSize: 35,\r\n      lineHeight: 1.2,\r\n    },\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      fontSize: 24,\r\n      lineHeight: 1.2,\r\n    },\r\n  },\r\n  siteDescription: {\r\n    marginBottom: theme.spacing(SPACING),\r\n  },\r\n}));\r\n\r\nexport type HomeProps = {};\r\n\r\n/**\r\n * @component Home\r\n */\r\nfunction Home({}: HomeProps) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <img\r\n        className={classes.heroImage}\r\n        src=\"/assets/svg/landing_art.svg\"\r\n        alt=\"landing art\"\r\n      />\r\n      <div className={classes.contentWrapper}>\r\n        <Box\r\n          width={{ xs: \"100%\", sm: \"100%\", md: \"65%\", lg: \"50%\" }}\r\n          height=\"100%\"\r\n          className={classes.heroContent}\r\n        >\r\n          <Typography gutterBottom className={classes.title} variant=\"h2\">\r\n            <Trans>WELCOME TO</Trans> <br />\r\n            <Typography\r\n              className={classes.title}\r\n              variant=\"h2\"\r\n              component=\"span\"\r\n              color=\"primary\"\r\n            >\r\n              <Trans>PLANETARY</Trans>\r\n            </Typography>{\" \"}\r\n            <Trans>JOB BOARD</Trans>\r\n          </Typography>\r\n\r\n          <Typography className={classes.siteDescription} gutterBottom>\r\n            <Trans>\r\n              Lorem Ipsum is simply dummy text of the printing and typesetting\r\n              industry. Lorem Ipsum has been the industry's standard dummy text\r\n              ever since the 1500s, when an unknown printer took a galley of\r\n              type and scrambled it to make a type specimen book. It has\r\n              survived not only five centuries\r\n            </Trans>\r\n          </Typography>\r\n          <Link to=\"/jobs\">\r\n            <Button size=\"large\" color=\"primary\" variant=\"contained\">\r\n              <Trans>Find a Job</Trans>\r\n            </Button>\r\n          </Link>\r\n        </Box>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\constants\\spacing.ts",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\constants\\index.ts",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\shared\\Select.tsx",["199"],"import { useState, useEffect, MouseEvent } from \"react\";\r\nimport { useTheme, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\n\r\n// components\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport Typography from \"components/shared/Typography\";\r\nimport Checkbox from \"components/shared/Checkbox\";\r\n\r\n// icons\r\nimport DownArrow from \"@material-ui/icons/ChevronRight\";\r\n\r\n// constants\r\nimport { SPACING, SPACING_LEAST } from \"constants/spacing\";\r\n\r\nconst WIDTH = 250;\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    width: WIDTH,\r\n    overflow: \"hidden\",\r\n  },\r\n  select: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    width: 320,\r\n    justifyContent: \"space-between\",\r\n  },\r\n  baseButton: {\r\n    width: \"100%\",\r\n    padding: theme.spacing(SPACING_LEAST),\r\n  },\r\n  name: {\r\n    width: \"100%\",\r\n  },\r\n  arrowButton: {\r\n    transition: theme.transitions.create([\"transform\"]),\r\n    transform: \"rotate(90deg)\",\r\n  },\r\n  arrowDown: {\r\n    transform: \"rotate(270deg)\",\r\n  },\r\n  selectButton: {\r\n    borderRadius: theme.shape.borderRadius,\r\n    padding: theme.spacing(SPACING_LEAST),\r\n  },\r\n  selectButtonWrapper: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  menuRoot: {\r\n    // marginTop: theme.spacing(SPACING),\r\n  },\r\n  menuContainer: {\r\n    maxHeight: 200,\r\n    outline: \"none\",\r\n    overflow: \"auto\",\r\n  },\r\n}));\r\n\r\nexport type OptionID = string | number;\r\n\r\nexport type Option = {\r\n  _id: OptionID;\r\n  label: string;\r\n};\r\n\r\nexport type SelectProps = {\r\n  label?: string;\r\n  options: Option[];\r\n} & (\r\n  | {\r\n      onChange?: (value: Option) => void;\r\n      selected?: OptionID;\r\n      multiSelect?: false;\r\n    }\r\n  | {\r\n      onChange?: (value: Option[]) => void;\r\n      selected?: OptionID[];\r\n      multiSelect: true;\r\n    }\r\n);\r\n\r\n/**\r\n * @component Select\r\n * @summary shared Select\r\n */\r\nfunction Select({\r\n  label,\r\n  options,\r\n  onChange = () => {},\r\n  multiSelect = false,\r\n  selected,\r\n}: SelectProps) {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n\r\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\r\n  const [_selected, setSelected] = useState<OptionID | OptionID[]>(\r\n    multiSelect ? [] : options[0]._id\r\n  );\r\n\r\n  const upArrowClasses = clsx(\r\n    classes.arrowButton,\r\n    Boolean(anchorEl) && classes.arrowDown\r\n  );\r\n\r\n  const onButtonClick = (event: MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const onMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const getOptions = (id: OptionID | OptionID[]) =>\r\n    multiSelect\r\n      ? (id as OptionID[]).map((itemId) =>\r\n          options.find((_) => _._id === itemId)\r\n        )\r\n      : options.find((_) => _._id === (id as OptionID));\r\n\r\n  const onMenuItemClick = (item: Option) => {\r\n    if (multiSelect) {\r\n      const itemIndex = (_selected as OptionID[])?.findIndex(\r\n        (selectedItem: OptionID) => selectedItem === item._id\r\n      );\r\n\r\n      if (itemIndex > -1) {\r\n        setSelected((prevState) => {\r\n          const newState = [...(prevState as OptionID[])];\r\n          newState.splice(itemIndex, 1);\r\n          onChange(getOptions(newState) as any);\r\n          return newState;\r\n        });\r\n      } else {\r\n        setSelected((prevState) => {\r\n          const newState = [...(prevState as OptionID[]), item._id];\r\n          onChange(getOptions(newState) as any);\r\n          return newState;\r\n        });\r\n      }\r\n    } else {\r\n      setSelected(item._id);\r\n      onChange(getOptions(item._id) as any);\r\n    }\r\n  };\r\n\r\n  const isSelected = (id: OptionID): boolean =>\r\n    multiSelect && Array.isArray(_selected)\r\n      ? (_selected as OptionID[]).includes(id)\r\n      : _selected === id;\r\n\r\n  useEffect(() => {\r\n    if (selected) {\r\n      setSelected(selected);\r\n    }\r\n  }, [selected]);\r\n\r\n  return (\r\n    <div>\r\n      <div></div>\r\n      <ButtonBase onClick={onButtonClick} className={classes.selectButton}>\r\n        <div className={classes.selectButtonWrapper}>\r\n          <Typography noWrap variant=\"button\" letterSpacing={SPACING}>\r\n            {label}\r\n          </Typography>\r\n          <DownArrow className={upArrowClasses} />\r\n        </div>\r\n      </ButtonBase>\r\n      <Menu\r\n        className={classes.menuRoot}\r\n        anchorEl={anchorEl}\r\n        getContentAnchorEl={null}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"center\",\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"center\",\r\n        }}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={onMenuClose}\r\n      >\r\n        <div className={classes.menuContainer}>\r\n          {options.map((item) => {\r\n            return (\r\n              <MenuItem onClick={() => onMenuItemClick(item)} key={item._id}>\r\n                <Checkbox size=\"small\" checked={isSelected(item._id)} />\r\n                <Typography\r\n                  noWrap\r\n                  variant=\"caption\"\r\n                  letterSpacing={SPACING}\r\n                  fontWeight={500}\r\n                >\r\n                  {item.label}\r\n                </Typography>\r\n              </MenuItem>\r\n            );\r\n          })}\r\n        </div>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Select;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\shared\\Typography.tsx",["200","201"],"import { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\n\r\nimport {\r\n  FontWeightProperty,\r\n  LetterSpacingProperty,\r\n} from \"@material-ui/styles/node_modules/csstype\";\r\n\r\n// components\r\nimport MuiTypography, {\r\n  TypographyProps as MuiTypographyProps,\r\n  TypographyTypeMap,\r\n} from \"@material-ui/core/Typography\";\r\nimport { OverridableComponent } from \"@material-ui/core/OverridableComponent\";\r\n\r\nconst TypographyColor = [\r\n  \"inherit\",\r\n  \"initial\",\r\n  \"primary\",\r\n  \"secondary\",\r\n  \"textPrimary\",\r\n  \"textSecondary\",\r\n  \"error\",\r\n];\r\n\r\nconst useStyles = makeStyles<Theme, TypographyProps<any>>((theme: Theme) => ({\r\n  root: ({ fontWeight, letterSpacing, color }) => {\r\n    const innerColor = { color: color as string };\r\n    return {\r\n      fontWeight,\r\n      letterSpacing,\r\n      ...(!TypographyColor.includes(color as string) && innerColor),\r\n    };\r\n  },\r\n}));\r\n\r\nexport type TypographyProps<TLength> = {\r\n  fontWeight?: FontWeightProperty;\r\n  letterSpacing?: LetterSpacingProperty<TLength>;\r\n  color?: typeof TypographyColor | string;\r\n  component?: React.ElementType<any>;\r\n} & Omit<MuiTypographyProps, \"color\">;\r\n\r\n/**\r\n * @component Typography\r\n */\r\nfunction Typography<TLength>({\r\n  fontWeight,\r\n  letterSpacing,\r\n  className,\r\n  component,\r\n  color,\r\n  ...rest\r\n}: TypographyProps<TLength>) {\r\n  const classes = useStyles({ fontWeight, letterSpacing, color, component });\r\n\r\n  const rootClasses = clsx(className, classes.root);\r\n\r\n  return (\r\n    <MuiTypography\r\n      component={component as any}\r\n      color={\r\n        TypographyColor.includes(color as string) ? (color as any) : \"inherit\"\r\n      }\r\n      className={rootClasses}\r\n      {...rest}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Typography;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\AppBar\\index.tsx",["202","203"],"import { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\n// components\r\nimport MuiAppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport LogoWithTitle from \"components/LogoWithTitle\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport NavLink from \"components/NavLink\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nimport { SPACING_LEAST } from \"constants/spacing\";\r\n// translate\r\nimport { Trans } from \"@lingui/macro\";\r\n// providers\r\nimport { useSettingsState } from \"providers/SettingsProvider\";\r\nimport { setSettingInStorage } from \"lib/storage\";\r\nimport LanguageSelect from \"components/LanguageSelect\";\r\n\r\n// providers\r\n// import { useSearchSetState, useSearchState } from \"providers/FilterProvider\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({}));\r\n\r\nexport type AppBarProps = {};\r\n\r\n/**\r\n * @component AppBar\r\n */\r\nfunction AppBar() {\r\n  const classes = useStyles();\r\n\r\n  const [settings, setSettings] = useSettingsState();\r\n\r\n  // const setSearch = useSearchSetState();\r\n\r\n  // const onSearchBarChange = (value: string) => {\r\n  //   setSearch((prevState) => ({ ...prevState, term: value }));\r\n  // };\r\n\r\n  // const onLocationBarChange = (value: string) => {\r\n  //   setSearch((prevState) => ({ ...prevState, location: value }));\r\n  // };\r\n\r\n  return (\r\n    <MuiAppBar color=\"inherit\" position=\"relative\" elevation={0}>\r\n      <Toolbar>\r\n        <LogoWithTitle />\r\n\r\n        <Box flex={1}></Box>\r\n        <Tooltip title=\"toggle dark mode\">\r\n          <Switch\r\n            checked={settings.type === \"dark\"}\r\n            onChange={(event) => {\r\n              const type = event.target.checked ? \"dark\" : \"light\";\r\n              setSettings({\r\n                ...settings,\r\n                type,\r\n              });\r\n\r\n              setSettingInStorage({ ...settings, type });\r\n            }}\r\n          ></Switch>\r\n        </Tooltip>\r\n\r\n        <LanguageSelect\r\n          languages={[\r\n            { code: \"pt\", name: \"Portuguese\", flag: \"/images/flags/pt.png\" },\r\n            { code: \"en\", name: \"English\", flag: \"/images/flags/us.png\" },\r\n            { code: \"fr\", name: \"French\", flag: \"/images/flags/fr.png\" },\r\n          ]}\r\n        />\r\n        <Trans>\r\n          <NavLink to=\"/jobs\">Jobs</NavLink>\r\n        </Trans>\r\n        <Trans>\r\n          <NavLink to=\"/about-us\">About Us</NavLink>\r\n        </Trans>\r\n      </Toolbar>\r\n    </MuiAppBar>\r\n  );\r\n}\r\n\r\nexport default AppBar;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\JobCard\\index.tsx",["204","205","206"],"import { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\n// components\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// constants\r\nimport { Jobs, Job } from \"constants/index\";\r\nimport { SPACING_HALF, SPACING_LEAST } from \"constants/spacing\";\r\n\r\n// images\r\nimport EarthImage from \"assets/images/earth.png\";\r\nimport { getDisplayDate } from \"utils\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    padding: theme.spacing(SPACING_HALF),\r\n    cursor: \"pointer\",\r\n    transition: theme.transitions.create([\"transform\"]),\r\n    \"&:hover\": {\r\n      transform: \"scale(1.01)\",\r\n    },\r\n    \"&:active\": {\r\n      transform: \"scale(0.99)\",\r\n    },\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  brandImage: {\r\n    borderRadius: \"50%\",\r\n    objectFit: \"cover\",\r\n    width: 58,\r\n    height: 58,\r\n    objectPosition: \"center\",\r\n    marginRight: theme.spacing(SPACING_HALF),\r\n  },\r\n  cardContent: {\r\n    flex: 1,\r\n  },\r\n  locationWrapper: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  boldText: {\r\n    fontWeight: \"bolder\",\r\n  },\r\n  semiBold: {\r\n    fontWeight: 500,\r\n  },\r\n  locationImage: {\r\n    width: 20,\r\n    height: 20,\r\n    margin: theme.spacing(0, SPACING_LEAST / 2),\r\n  },\r\n  contentWrapper: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nexport type JobCardProps = Job;\r\n\r\n/**\r\n * @component JobCard\r\n */\r\nfunction JobCard({\r\n  _id,\r\n  company,\r\n  jobField,\r\n  description,\r\n  jobType,\r\n  location,\r\n  necessarySkills,\r\n  title,\r\n  date,\r\n}: JobCardProps) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Link to={`/jobs/${_id}`}>\r\n      <Paper className={classes.root} variant=\"elevation\">\r\n        <div className={classes.wrapper}>\r\n          <img\r\n            className={classes.brandImage}\r\n            src={company.image}\r\n            alt={`${company.name} logo`}\r\n          />\r\n\r\n          <div className={classes.contentWrapper}>\r\n            <Typography>{title}</Typography>\r\n\r\n            <ListItemText\r\n              primaryTypographyProps={{\r\n                className: classes.boldText,\r\n              }}\r\n              primary={jobField.toUpperCase()}\r\n              secondary={company.name}\r\n              className={classes.cardContent}\r\n            />\r\n          </div>\r\n\r\n          <div className={classes.locationWrapper}>\r\n            <Typography color=\"textSecondary\" className={classes.semiBold}>\r\n              FROM\r\n            </Typography>\r\n            <img\r\n              className={classes.locationImage}\r\n              alt=\"location\"\r\n              src={location.image}\r\n            />\r\n            <Typography color=\"textSecondary\" className={classes.semiBold}>\r\n              TODAY\r\n            </Typography>\r\n          </div>\r\n        </div>\r\n      </Paper>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default JobCard;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\SearchBar\\index.tsx",["207"],"import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n// constants\r\nimport { SPACING, SPACING_LEAST } from \"constants/spacing\";\r\n\r\n// components\r\nimport Input, { InputProps } from \"components/shared/Input\";\r\n\r\n// icons\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    opacity: 0.5,\r\n    marginRight: theme.spacing(SPACING_LEAST),\r\n  },\r\n}));\r\n\r\nexport type SearchBarProps = {} & InputProps;\r\n\r\n/**\r\n * @component SearchBar\r\n * @summary autocomplete search bar\r\n */\r\nfunction SearchBar({ ...rest }: SearchBarProps) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Input\r\n      rounded\r\n      {...rest}\r\n      startAdornment={<SearchIcon color=\"primary\" className={classes.icon} />}\r\n    />\r\n  );\r\n}\r\n\r\nexport default SearchBar;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\FilterDrawer\\index.tsx",["208","209","210","211"],"import { useEffect, useState } from \"react\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\n// components\r\nimport Drawer, { DrawerProps } from \"@material-ui/core/Drawer\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Checkbox from \"components/shared/Checkbox\";\r\nimport Typography from \"components/shared/Typography\";\r\n\r\n// constants\r\nimport { SPACING, SPACING_DOUBLE, SPACING_HALF } from \"constants/spacing\";\r\nimport { JOB_FILEDS, JOB_TYPES } from \"constants/index\";\r\nimport { useFilterState } from \"providers/FilterProvider\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    width: 300,\r\n  },\r\n  drawerWrapper: {\r\n    padding: theme.spacing(SPACING),\r\n    height: \"100%\",\r\n  },\r\n  titleWrapper: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(SPACING_HALF),\r\n  },\r\n  drawerSection: {\r\n    marginBottom: theme.spacing(SPACING),\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(SPACING_HALF),\r\n  },\r\n  listWrapper: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  formLabel: {\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nexport type FilterDrawerProps = DrawerProps;\r\n\r\n/**\r\n * @component FilterDrawer\r\n */\r\nfunction FilterDrawer({ open, ...rest }: FilterDrawerProps) {\r\n  const classes = useStyles();\r\n\r\n  const [filter, setFilter] = useFilterState();\r\n  const [jobFields, setJobFields] = useState<string[]>([]);\r\n  const [jobTypes, setJobTypes] = useState<string[]>([]);\r\n\r\n  const handleJobTypeChange = (jobType: string) => {\r\n    setJobTypes((prevState) => {\r\n      let temp = [...prevState];\r\n\r\n      const index = temp?.findIndex((item) => item === jobType);\r\n      if (index > -1) {\r\n        temp.splice(index, 1);\r\n      } else {\r\n        temp = [...temp, jobType];\r\n      }\r\n\r\n      return temp;\r\n    });\r\n  };\r\n\r\n  const handleJobFieldChange = (jobField: string) => {\r\n    setJobFields((prevState) => {\r\n      let temp = [...prevState];\r\n\r\n      const index = temp?.findIndex((item) => item === jobField);\r\n      if (index > -1) {\r\n        temp.splice(index, 1);\r\n      } else {\r\n        temp = [...temp, jobField];\r\n      }\r\n\r\n      return temp;\r\n    });\r\n  };\r\n\r\n  const handleApplyFilter = () => {\r\n    setFilter({ ...filter, jobFields, jobTypes });\r\n  };\r\n\r\n  const handleDrawerEnter = () => {\r\n    setJobFields(filter.jobFields);\r\n    setJobTypes(filter.jobTypes);\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      SlideProps={{ onEnter: handleDrawerEnter }}\r\n      open={open}\r\n      variant=\"temporary\"\r\n      classes={{ paper: classes.root }}\r\n      {...rest}\r\n    >\r\n      <div className={classes.drawerWrapper}>\r\n        <div className={classes.drawerSection}>\r\n          <div className={classes.titleWrapper}>\r\n            <Typography noWrap component=\"span\">\r\n              {jobTypes.length}\r\n              <Typography color=\"textSecondary\" noWrap component=\"span\">\r\n                /{JOB_TYPES.length}\r\n              </Typography>\r\n            </Typography>\r\n            <Typography\r\n              letterSpacing={SPACING_DOUBLE}\r\n              noWrap\r\n              className={classes.title}\r\n            >\r\n              JOB TYPE\r\n            </Typography>\r\n          </div>\r\n\r\n          <div className={classes.listWrapper}>\r\n            {JOB_TYPES.map((jobType) => (\r\n              <ListItem\r\n                key={jobType}\r\n                button\r\n                className={classes.formLabel}\r\n                onClick={() => handleJobTypeChange(jobType)}\r\n              >\r\n                <Checkbox checked={jobTypes.includes(jobType)} />\r\n                <Typography>{jobType.toUpperCase()}</Typography>\r\n              </ListItem>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className={classes.drawerSection}>\r\n          <div className={classes.titleWrapper}>\r\n            <Typography noWrap component=\"span\">\r\n              {jobFields.length}\r\n              <Typography color=\"textSecondary\" noWrap component=\"span\">\r\n                /{JOB_FILEDS.length}\r\n              </Typography>\r\n            </Typography>\r\n            <Typography\r\n              noWrap\r\n              letterSpacing={SPACING_DOUBLE}\r\n              className={classes.title}\r\n            >\r\n              JOB FIELDS\r\n            </Typography>\r\n          </div>\r\n\r\n          <div className={classes.listWrapper}>\r\n            {JOB_FILEDS.map((field) => (\r\n              <ListItem\r\n                key={field}\r\n                button\r\n                className={classes.formLabel}\r\n                onClick={() => handleJobFieldChange(field)}\r\n              >\r\n                <Checkbox checked={jobFields.includes(field)} />\r\n                <Typography>{field.toUpperCase()}</Typography>\r\n              </ListItem>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <Button\r\n          onClick={handleApplyFilter}\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Apply Filter\r\n        </Button>\r\n      </div>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nexport default FilterDrawer;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\PlanetFilterBar\\index.tsx",["212","213"],"import { useState, Fragment } from \"react\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\n// components\r\nimport PlanetWithTitle, {\r\n  PlanetWithTitleProps as Planet,\r\n} from \"components/PlanetWithTitle\";\r\nimport Select from \"components/shared/Select\";\r\n\r\n// providers\r\nimport { useFilterState } from \"providers/FilterProvider\";\r\n\r\n// constants\r\nimport { PLANETS, PlanetObject } from \"constants/index\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-around\",\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nexport type PlanetFilterBarProps = {\r\n  shrink?: boolean;\r\n};\r\n\r\n/**\r\n * @component PlanetFilterBar\r\n */\r\nfunction PlanetFilterBar({ shrink }: PlanetFilterBarProps) {\r\n  const classes = useStyles();\r\n\r\n  const [filter, setFilter] = useFilterState();\r\n\r\n  const isActive = (planetName: string): boolean =>\r\n    filter?.locations?.findIndex((_) => _.name === planetName) > -1;\r\n\r\n  const handlePlanetClick = (planet: PlanetObject) => {\r\n    const index = filter?.locations?.findIndex((_) => _.name === planet.name);\r\n    if ((index as number) > -1) {\r\n      setFilter((prevState) => {\r\n        const newState = { ...prevState };\r\n        newState.locations.splice(index as number, 1);\r\n        return newState;\r\n      });\r\n    } else {\r\n      setFilter((prevState) => ({\r\n        ...prevState,\r\n        locations: [...prevState.locations, planet],\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {!shrink && (\r\n        <div className={classes.root}>\r\n          {PLANETS.map((planet) => (\r\n            <PlanetWithTitle\r\n              key={planet.name}\r\n              {...planet}\r\n              selected={isActive(planet.name)}\r\n              onClick={() => handlePlanetClick(planet)}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n      {shrink && (\r\n        <Select\r\n          label=\"LOCATION\"\r\n          selected={filter.locations.map((_) => _.name)}\r\n          onChange={(value) => {\r\n            const planetObjectList = value.map((_) =>\r\n              PLANETS.find((planet) => planet.name === _._id)\r\n            );\r\n            setFilter((prevState) => ({\r\n              ...prevState,\r\n              locations: planetObjectList as PlanetObject[],\r\n            }));\r\n          }}\r\n          multiSelect\r\n          options={PLANETS.map((planet) => ({\r\n            _id: planet.name,\r\n            label: planet.name.toUpperCase(),\r\n          }))}\r\n        />\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default PlanetFilterBar;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\utils\\index.tsx",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\shared\\Checkbox.tsx",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\shared\\Input.tsx",["214"],"import { useState, ChangeEvent, useEffect, ReactNode } from \"react\";\r\nimport { useTheme } from \"@material-ui/core\";\r\n\r\nimport clsx from \"clsx\";\r\n\r\n// constants\r\nimport { BORDER_RADIUS, SPACING_HALF, SPACING_LEAST } from \"constants/spacing\";\r\n\r\n// components\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport InputBase, { InputBaseProps } from \"@material-ui/core/InputBase\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\n\r\n// icons\r\nimport Close from \"@material-ui/icons/Close\";\r\n\r\nexport type InputProps = {\r\n  value?: string;\r\n  startAdornment?: ReactNode;\r\n  endAdornment?: ReactNode;\r\n  onChange?: (value: string) => void;\r\n  disableClearButton?: boolean;\r\n  rounded?: boolean;\r\n} & Omit<InputBaseProps, \"onChange\">;\r\n\r\n/**\r\n * @component Input\r\n * @summary shared Input\r\n */\r\nfunction Input({\r\n  value = \"\",\r\n  startAdornment,\r\n  endAdornment,\r\n  rounded = false,\r\n  disableClearButton,\r\n  onChange = () => {},\r\n  className,\r\n  ...rest\r\n}: InputProps) {\r\n  const theme = useTheme();\r\n\r\n  const [_value, setValue] = useState<string>(value);\r\n\r\n  const onValueChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value as string;\r\n    setValue(value);\r\n    onChange(value);\r\n  };\r\n\r\n  const onClear = () => {\r\n    const value = \"\";\r\n    setValue(value);\r\n    onChange(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setValue(value);\r\n  }, [value]);\r\n\r\n  const borderRadius = rounded ? BORDER_RADIUS * 10 : \"auto\";\r\n\r\n  const rootClasses = clsx(className);\r\n\r\n  return (\r\n    <Paper\r\n      elevation={0}\r\n      variant=\"outlined\"\r\n      style={{ borderRadius: borderRadius }}\r\n      data-testid=\"custom-input\"\r\n      className={rootClasses}\r\n    >\r\n      <Box\r\n        display=\"flex\"\r\n        px={SPACING_LEAST}\r\n        py={SPACING_LEAST}\r\n        alignItems=\"center\"\r\n      >\r\n        {startAdornment}\r\n        <Box flex={1} ml={SPACING_LEAST}>\r\n          <InputBase\r\n            fullWidth\r\n            aria-label=\"core-input\"\r\n            value={_value}\r\n            onChange={onValueChange}\r\n            {...rest}\r\n          />\r\n        </Box>\r\n        {!disableClearButton && (\r\n          <Fade in={_value.length > 0} data-testid=\"input-clear-button\">\r\n            <Box mr={endAdornment ? SPACING_HALF : 0}>\r\n              <IconButton onClick={onClear} size=\"small\">\r\n                <Close fontSize=\"small\" />\r\n              </IconButton>\r\n            </Box>\r\n          </Fade>\r\n        )}\r\n        {endAdornment}\r\n      </Box>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\PlanetWithTitle\\index.tsx",["215"],"import { fade, makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nimport clsx from \"clsx\";\r\n\r\n// components\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { SPACING_LEAST } from \"constants/spacing\";\r\nimport { PlanetObject } from \"constants/index\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    transition: theme.transitions.create([\"opacity\"]),\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n    cursor: \"pointer\",\r\n    position: \"relative\",\r\n    \"&:hover $image\": {\r\n      transform: \"scale(1.1)\",\r\n    },\r\n    opacity: 0.5,\r\n  },\r\n  active: {\r\n    opacity: 1,\r\n    \"& $image\": {\r\n      transform: \"scale(1.1)\",\r\n    },\r\n    \"& $name\": {\r\n      fontWeight: 900,\r\n    },\r\n  },\r\n\r\n  image: {\r\n    width: 85,\r\n    height: 85,\r\n    objectFit: \"contain\",\r\n    objectPosition: \"center\",\r\n    marginBottom: theme.spacing(SPACING_LEAST),\r\n    transition: theme.transitions.create([\"transform\"]),\r\n  },\r\n  name: {\r\n    fontWeight: 500,\r\n    color: ({ color }: Pick<PlanetWithTitleProps, \"color\">) => color,\r\n  },\r\n}));\r\n\r\nexport type PlanetWithTitleProps = {\r\n  selected?: boolean;\r\n  onClick?: () => void;\r\n} & PlanetObject;\r\n\r\n/**\r\n * @component PlanetWithTitle\r\n */\r\nfunction PlanetWithTitle({\r\n  image,\r\n  name,\r\n  color,\r\n  onClick,\r\n  selected,\r\n}: PlanetWithTitleProps) {\r\n  const classes = useStyles({ color });\r\n\r\n  const rootClasses = clsx(classes.root, { [classes.active]: selected });\r\n\r\n  return (\r\n    <div className={rootClasses} onClick={onClick}>\r\n      <img className={classes.image} alt={`planet ${name}`} src={image} />\r\n      <Typography className={classes.name}>{name.toUpperCase()}</Typography>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlanetWithTitle;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\LanguageSelect\\index.tsx",["216"],"import { useMemo, useState } from \"react\";\r\n\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nimport { i18n } from \"@lingui/core\";\r\n\r\nimport {\r\n  useSettingsState,\r\n  Settings,\r\n  Language,\r\n} from \"providers/SettingsProvider\";\r\n\r\nimport { setSettingInStorage } from \"lib/storage\";\r\n\r\n// components\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  button: {},\r\n  image: {\r\n    borderRadius: \"50%\",\r\n    width: 24,\r\n    height: 24,\r\n    objectFit: \"cover\",\r\n  },\r\n  menu: {\r\n    borderRadius: theme.shape.borderRadius / 2,\r\n  },\r\n}));\r\n\r\ntype LanguageItem = { code: Language; flag: string; name: string };\r\nexport type LanguageSelectProps = {\r\n  languages: LanguageItem[];\r\n};\r\n\r\n/**\r\n * @component LanguageSelect\r\n */\r\nfunction LanguageSelect({ languages }: LanguageSelectProps) {\r\n  const classes = useStyles();\r\n\r\n  const [settings, setSettings] = useSettingsState();\r\n\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const findByCode = (code: Language) => {\r\n    return languages.find((_) => _.code === code);\r\n  };\r\n\r\n  const selectedLanguage = useMemo(() => {\r\n    return findByCode(settings.lang);\r\n  }, [settings]);\r\n\r\n  return (\r\n    <div>\r\n      <IconButton onClick={handleClick}>\r\n        <img\r\n          src={selectedLanguage?.flag}\r\n          alt={`${selectedLanguage?.code} language`}\r\n          className={classes.image}\r\n        />\r\n      </IconButton>\r\n      <Menu\r\n        classes={{ paper: classes.menu }}\r\n        id=\"simple-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n        {languages.map((lang) => {\r\n          return (\r\n            <MenuItem\r\n              key={lang.code}\r\n              onClick={() => {\r\n                const newSettings: Settings = { ...settings, lang: lang.code };\r\n                setSettings(newSettings);\r\n                setSettingInStorage(newSettings);\r\n\r\n                i18n.activate(lang.code);\r\n\r\n                handleClose();\r\n              }}\r\n            >\r\n              {lang.name}\r\n            </MenuItem>\r\n          );\r\n        })}\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LanguageSelect;\r\n","C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\NavLink\\index.tsx",[],"C:\\Users\\User\\Desktop\\new\\job-board\\src\\components\\LogoWithTitle\\index.tsx",["217"],"import { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\n// components\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\n\r\n// constants\r\nimport { SPACING_LEAST } from \"constants/spacing\";\r\nimport { Link } from \"react-router-dom\";\r\n// translate\r\nimport { t } from \"@lingui/macro\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  logoImage: {\r\n    marginRight: theme.spacing(SPACING_LEAST),\r\n  },\r\n  root: {\r\n    textDecoration: \"none\",\r\n  },\r\n}));\r\n\r\nexport type LogoWithTitleProps = {};\r\n\r\n/**\r\n * @component LogoWithTitle\r\n */\r\nfunction LogoWithTitle({}: LogoWithTitleProps) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Link to=\"/\" className={classes.root}>\r\n      <Box display=\"flex\" alignItems=\"center\">\r\n        <img\r\n          className={classes.logoImage}\r\n          width=\"45px\"\r\n          src=\"/logo.png\"\r\n          alt=\"logo\"\r\n        />\r\n        <Hidden smDown implementation=\"css\">\r\n          <ListItemText\r\n            primaryTypographyProps={{\r\n              color: \"primary\",\r\n            }}\r\n            primary=\"Planetary\"\r\n            secondary={t`Find your favorite remote job`}\r\n          />\r\n        </Hidden>\r\n      </Box>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default LogoWithTitle;\r\n",{"ruleId":"218","severity":1,"message":"219","line":2,"column":10,"nodeType":"220","messageId":"221","endLine":2,"endColumn":18},{"ruleId":"218","severity":1,"message":"222","line":11,"column":35,"nodeType":"220","messageId":"221","endLine":11,"endColumn":40},{"ruleId":"218","severity":1,"message":"223","line":11,"column":42,"nodeType":"220","messageId":"221","endLine":11,"endColumn":48},{"ruleId":"224","severity":1,"message":"225","line":31,"column":20,"nodeType":"226","messageId":"227","endLine":31,"endColumn":38},{"ruleId":"218","severity":1,"message":"228","line":32,"column":9,"nodeType":"220","messageId":"221","endLine":32,"endColumn":16},{"ruleId":"224","severity":1,"message":"225","line":20,"column":17,"nodeType":"226","messageId":"227","endLine":20,"endColumn":32},{"ruleId":"218","severity":1,"message":"229","line":1,"column":24,"nodeType":"220","messageId":"221","endLine":1,"endColumn":33},{"ruleId":"218","severity":1,"message":"230","line":5,"column":10,"nodeType":"220","messageId":"221","endLine":5,"endColumn":26},{"ruleId":"218","severity":1,"message":"231","line":9,"column":8,"nodeType":"220","messageId":"221","endLine":9,"endColumn":13},{"ruleId":"218","severity":1,"message":"232","line":11,"column":8,"nodeType":"220","messageId":"221","endLine":11,"endColumn":17},{"ruleId":"218","severity":1,"message":"233","line":12,"column":8,"nodeType":"220","messageId":"221","endLine":12,"endColumn":14},{"ruleId":"218","severity":1,"message":"234","line":16,"column":10,"nodeType":"220","messageId":"221","endLine":16,"endColumn":17},{"ruleId":"218","severity":1,"message":"235","line":16,"column":19,"nodeType":"220","messageId":"221","endLine":16,"endColumn":33},{"ruleId":"218","severity":1,"message":"236","line":17,"column":10,"nodeType":"220","messageId":"221","endLine":17,"endColumn":20},{"ruleId":"218","severity":1,"message":"237","line":67,"column":24,"nodeType":"220","messageId":"221","endLine":67,"endColumn":33},{"ruleId":"218","severity":1,"message":"238","line":12,"column":8,"nodeType":"220","messageId":"221","endLine":12,"endColumn":9},{"ruleId":"224","severity":1,"message":"225","line":121,"column":15,"nodeType":"226","messageId":"227","endLine":121,"endColumn":28},{"ruleId":"239","severity":1,"message":"240","line":94,"column":6,"nodeType":"241","endLine":94,"endColumn":8,"suggestions":"242"},{"ruleId":"218","severity":1,"message":"243","line":11,"column":10,"nodeType":"220","messageId":"221","endLine":11,"endColumn":11},{"ruleId":"224","severity":1,"message":"225","line":20,"column":18,"nodeType":"226","messageId":"227","endLine":20,"endColumn":34},{"ruleId":"218","severity":1,"message":"228","line":21,"column":9,"nodeType":"220","messageId":"221","endLine":21,"endColumn":16},{"ruleId":"218","severity":1,"message":"244","line":9,"column":8,"nodeType":"220","messageId":"221","endLine":9,"endColumn":23},{"ruleId":"224","severity":1,"message":"225","line":67,"column":15,"nodeType":"226","messageId":"227","endLine":67,"endColumn":28},{"ruleId":"218","severity":1,"message":"245","line":98,"column":9,"nodeType":"220","messageId":"221","endLine":98,"endColumn":14},{"ruleId":"218","severity":1,"message":"246","line":12,"column":3,"nodeType":"220","messageId":"221","endLine":12,"endColumn":20},{"ruleId":"218","severity":1,"message":"247","line":14,"column":10,"nodeType":"220","messageId":"221","endLine":14,"endColumn":30},{"ruleId":"218","severity":1,"message":"248","line":12,"column":10,"nodeType":"220","messageId":"221","endLine":12,"endColumn":23},{"ruleId":"218","severity":1,"message":"228","line":31,"column":9,"nodeType":"220","messageId":"221","endLine":31,"endColumn":16},{"ruleId":"218","severity":1,"message":"249","line":10,"column":10,"nodeType":"220","messageId":"221","endLine":10,"endColumn":14},{"ruleId":"218","severity":1,"message":"250","line":14,"column":8,"nodeType":"220","messageId":"221","endLine":14,"endColumn":18},{"ruleId":"218","severity":1,"message":"251","line":15,"column":10,"nodeType":"220","messageId":"221","endLine":15,"endColumn":24},{"ruleId":"218","severity":1,"message":"234","line":4,"column":10,"nodeType":"220","messageId":"221","endLine":4,"endColumn":17},{"ruleId":"218","severity":1,"message":"252","line":1,"column":10,"nodeType":"220","messageId":"221","endLine":1,"endColumn":19},{"ruleId":"218","severity":1,"message":"253","line":6,"column":8,"nodeType":"220","messageId":"221","endLine":6,"endColumn":18},{"ruleId":"218","severity":1,"message":"254","line":7,"column":8,"nodeType":"220","messageId":"221","endLine":7,"endColumn":24},{"ruleId":"218","severity":1,"message":"255","line":8,"column":8,"nodeType":"220","messageId":"221","endLine":8,"endColumn":13},{"ruleId":"218","severity":1,"message":"256","line":1,"column":10,"nodeType":"220","messageId":"221","endLine":1,"endColumn":18},{"ruleId":"218","severity":1,"message":"257","line":6,"column":27,"nodeType":"220","messageId":"221","endLine":6,"endColumn":33},{"ruleId":"218","severity":1,"message":"245","line":42,"column":9,"nodeType":"220","messageId":"221","endLine":42,"endColumn":14},{"ruleId":"218","severity":1,"message":"258","line":1,"column":10,"nodeType":"220","messageId":"221","endLine":1,"endColumn":14},{"ruleId":"239","severity":1,"message":"259","line":62,"column":6,"nodeType":"241","endLine":62,"endColumn":16,"suggestions":"260"},{"ruleId":"224","severity":1,"message":"225","line":28,"column":24,"nodeType":"226","messageId":"227","endLine":28,"endColumn":46},"@typescript-eslint/no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Switch' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'classes' is assigned a value but never used.","'ReactNode' is defined but never used.","'useScrollTrigger' is defined but never used.","'Slide' is defined but never used.","'FilterBar' is defined but never used.","'Footer' is defined but never used.","'SPACING' is defined but never used.","'SPACING_DOUBLE' is defined but never used.","'useHistory' is defined but never used.","'container' is assigned a value but never used.","'_' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["261"],"'t' is defined but never used.","'DefaultTemplate' is defined but never used.","'theme' is assigned a value but never used.","'TypographyTypeMap' is defined but never used.","'OverridableComponent' is defined but never used.","'SPACING_LEAST' is defined but never used.","'Jobs' is defined but never used.","'EarthImage' is defined but never used.","'getDisplayDate' is defined but never used.","'useEffect' is defined but never used.","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Radio' is defined but never used.","'useState' is defined but never used.","'Planet' is defined but never used.","'fade' is defined but never used.","React Hook useMemo has a missing dependency: 'findByCode'. Either include it or remove the dependency array.",["262"],{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},"Update the dependencies array to be: [id]",{"range":"267","text":"268"},"Update the dependencies array to be: [findByCode, settings.lang]",{"range":"269","text":"270"},[2310,2312],"[id]",[1497,1507],"[findByCode, settings.lang]"]